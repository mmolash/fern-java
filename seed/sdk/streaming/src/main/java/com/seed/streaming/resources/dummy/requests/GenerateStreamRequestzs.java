/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.streaming.resources.dummy.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.streaming.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GenerateStreamRequestzs.Builder.class)
public final class GenerateStreamRequestzs {
    private final int numEvents;

    private final Map<String, Object> additionalProperties;

    private GenerateStreamRequestzs(int numEvents, Map<String, Object> additionalProperties) {
        this.numEvents = numEvents;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("num_events")
    public int getNumEvents() {
        return numEvents;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GenerateStreamRequestzs && equalTo((GenerateStreamRequestzs) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GenerateStreamRequestzs other) {
        return numEvents == other.numEvents;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.numEvents);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NumEventsStage builder() {
        return new Builder();
    }

    public interface NumEventsStage {
        _FinalStage numEvents(int numEvents);

        Builder from(GenerateStreamRequestzs other);
    }

    public interface _FinalStage {
        GenerateStreamRequestzs build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NumEventsStage, _FinalStage {
        private int numEvents;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(GenerateStreamRequestzs other) {
            numEvents(other.getNumEvents());
            return this;
        }

        @Override
        @JsonSetter("num_events")
        public _FinalStage numEvents(int numEvents) {
            this.numEvents = numEvents;
            return this;
        }

        @Override
        public GenerateStreamRequestzs build() {
            return new GenerateStreamRequestzs(numEvents, additionalProperties);
        }
    }
}
